{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rahul\\\\OneDrive\\\\Desktop\\\\LoanApprover\\\\statics\\\\loan-approval-system\\\\src\\\\Components\\\\Dashboard\\\\Edit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Edit(_ref) {\n  _s();\n\n  let {\n    users,\n    selectedUser,\n    setUsers,\n    setIsEditing\n  } = _ref;\n  const id = selectedUser.id;\n  const [firstName, setFirstName] = useState(selectedUser.firstName);\n  const [lastName, setLastName] = useState(selectedUser.lastName);\n  const [email, setEmail] = useState(selectedUser.email);\n  const [salary, setSalary] = useState(selectedUser.salary);\n  const [date, setDate] = useState(selectedUser.date);\n\n  const handleUpdate = e => {\n    e.preventDefault();\n\n    if (!firstName || !lastName || !email || !salary || !date) {\n      return Swal.fire({\n        icon: 'error',\n        title: 'Error!',\n        text: 'All fields are required.',\n        showConfirmButton: true\n      });\n    }\n\n    const employee = {\n      id,\n      firstName,\n      lastName,\n      email,\n      salary,\n      date\n    };\n\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].id === id) {\n        users.splice(i, 1, employee);\n        break;\n      }\n    }\n\n    setUsers(users);\n    setIsEditing(false);\n    Swal.fire({\n      icon: 'success',\n      title: 'Updated!',\n      text: `${employee.firstName} ${employee.lastName}'s data has been updated.`,\n      showConfirmButton: false,\n      timer: 1500\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"small-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpdate,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"firstName\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"firstName\",\n        type: \"text\",\n        name: \"firstName\",\n        value: firstName,\n        onChange: e => setFirstName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lastName\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lastName\",\n        type: \"text\",\n        name: \"lastName\",\n        value: lastName,\n        onChange: e => setLastName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        type: \"email\",\n        name: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"salary\",\n        children: \"Salary ($)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"salary\",\n        type: \"number\",\n        name: \"salary\",\n        value: salary,\n        onChange: e => setSalary(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"date\",\n        type: \"date\",\n        name: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          style: {\n            marginLeft: '12px'\n          },\n          className: \"muted-button\",\n          type: \"button\",\n          value: \"Cancel\",\n          onClick: () => setIsEditing(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Edit, \"ACUFuHdGHBrc6vZ9RPmBx6qyUFs=\");\n\n_c = Edit;\nexport default Edit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"sources":["C:/Users/Rahul/OneDrive/Desktop/LoanApprover/statics/loan-approval-system/src/Components/Dashboard/Edit.js"],"names":["React","useState","Swal","Edit","users","selectedUser","setUsers","setIsEditing","id","firstName","setFirstName","lastName","setLastName","email","setEmail","salary","setSalary","date","setDate","handleUpdate","e","preventDefault","fire","icon","title","text","showConfirmButton","employee","i","length","splice","timer","target","value","marginTop","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction Edit({users,selectedUser,setUsers,setIsEditing}) {\r\n    const id = selectedUser.id;\r\n\r\n    const [firstName, setFirstName] = useState(selectedUser.firstName);\r\n    const [lastName, setLastName] = useState(selectedUser.lastName);\r\n    const [email, setEmail] = useState(selectedUser.email);\r\n    const [salary, setSalary] = useState(selectedUser.salary);\r\n    const [date, setDate] = useState(selectedUser.date);\r\n\r\n    const handleUpdate = e => {\r\n        e.preventDefault();\r\n\r\n        if (!firstName || !lastName || !email || !salary || !date) {\r\n            return Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error!',\r\n                text: 'All fields are required.',\r\n                showConfirmButton: true\r\n            });\r\n        }\r\n\r\n        const employee = {\r\n            id,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            salary,\r\n            date\r\n        };\r\n\r\n        for (let i = 0; i < users.length; i++) {\r\n            if (users[i].id === id) {\r\n                users.splice(i, 1, employee);\r\n                break;\r\n            }\r\n        }\r\n\r\n        setUsers(users);\r\n        setIsEditing(false);\r\n\r\n        Swal.fire({\r\n            icon: 'success',\r\n            title: 'Updated!',\r\n            text: `${employee.firstName} ${employee.lastName}'s data has been updated.`,\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n        });\r\n    };\r\n  return (\r\n    <div className=\"small-container\">\r\n            <form onSubmit={handleUpdate}>\r\n                <h1>Edit Employee</h1>\r\n                <label htmlFor=\"firstName\">First Name</label>\r\n                <input\r\n                    id=\"firstName\"\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    value={firstName}\r\n                    onChange={e => setFirstName(e.target.value)}\r\n                />\r\n                <label htmlFor=\"lastName\">Last Name</label>\r\n                <input\r\n                    id=\"lastName\"\r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    value={lastName}\r\n                    onChange={e => setLastName(e.target.value)}\r\n                />\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    onChange={e => setEmail(e.target.value)}\r\n                />\r\n                <label htmlFor=\"salary\">Salary ($)</label>\r\n                <input\r\n                    id=\"salary\"\r\n                    type=\"number\"\r\n                    name=\"salary\"\r\n                    value={salary}\r\n                    onChange={e => setSalary(e.target.value)}\r\n                />\r\n                <label htmlFor=\"date\">Date</label>\r\n                <input\r\n                    id=\"date\"\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    value={date}\r\n                    onChange={e => setDate(e.target.value)}\r\n                />\r\n                <div style={{ marginTop: '30px' }}>\r\n                    <input type=\"submit\" value=\"Update\" />\r\n                    <input\r\n                        style={{ marginLeft: '12px' }}\r\n                        className=\"muted-button\"\r\n                        type=\"button\"\r\n                        value=\"Cancel\"\r\n                        onClick={() => setIsEditing(false)}\r\n                    />\r\n                </div>\r\n            </form>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Edit\r\n"]},"metadata":{},"sourceType":"module"}